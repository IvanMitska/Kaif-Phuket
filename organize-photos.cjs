#!/usr/bin/env node

/**
 * üìÅ –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Ö –ø–æ –ø–∞–ø–∫–∞–º
 */

const fs = require('fs');
const path = require('path');

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
const categoryKeywords = {
  'breakfast': ['–∑–∞–≤—Ç—Ä–∞–∫', 'breakfast', '–∫–∞—à–∞', '—è–π—Ü–∞', '–æ–º–ª–µ—Ç', '–±–ª–∏–Ω—ã', '—Å—ã—Ä–Ω–∏–∫–∏', '–º—é—Å–ª–∏', 'pancake', 'eggs', 'omelette'],
  'soup': ['—Å—É–ø', 'soup', '–±–æ—Ä—â', '—Å–æ–ª—è–Ω–∫–∞', '—É—Ö–∞', '–±—É–ª—å–æ–Ω', '—Ç–æ–º–∞—Ç–Ω—ã–π', '–≥—Ä–∏–±–Ω–æ–π', 'borscht', 'broth'],
  'salad': ['—Å–∞–ª–∞—Ç', 'salad', '—Ü–µ–∑–∞—Ä—å', '–≥—Ä–µ—á–µ—Å–∫–∏–π', '–æ–ª–∏–≤—å–µ', '–≤–∏–Ω–µ–≥—Ä–µ—Ç', '–∫–∞–ø—Ä–µ–∑–µ', '–∑–∞–∫—É—Å–∫–∞', 'caesar', 'greek'],
  'grill': ['–≥—Ä–∏–ª—å', 'grill', '—Å—Ç–µ–π–∫', '—à–∞—à–ª—ã–∫', '–±–∞—Ä–±–µ–∫—é', '–º—è—Å–æ', '—Ä—ã–±–∞', '–ª–æ—Å–æ—Å—å', '–∫—É—Ä–∏—Ü–∞', 'steak', 'bbq', 'meat', 'salmon', 'chicken'],
  'burger': ['–±—É—Ä–≥–µ—Ä', 'burger', '—á–∏–∑–±—É—Ä–≥–µ—Ä', '–≥–∞–º–±—É—Ä–≥–µ—Ä', 'cheeseburger', 'hamburger'],
  'dessert': ['–¥–µ—Å–µ—Ä—Ç', 'dessert', '—Ç–æ—Ä—Ç', '–ø–∏—Ä–æ–∂–Ω–æ–µ', '–º–æ—Ä–æ–∂–µ–Ω–æ–µ', '—Ç–∏—Ä–∞–º–∏—Å—É', '—á–∏–∑–∫–µ–π–∫', 'cake', 'ice', 'tiramisu', 'cheesecake'],
  'tea': ['—á–∞–π', 'tea', '—á–µ—Ä–Ω—ã–π', '–∑–µ–ª–µ–Ω—ã–π', '—Ç—Ä–∞–≤—è–Ω–æ–π', '—Ä–æ–º–∞—à–∫–∞', '–º—è—Ç–∞', 'black', 'green', 'herbal'],
  'coffee': ['–∫–æ—Ñ–µ', 'coffee', '—ç—Å–ø—Ä–µ—Å—Å–æ', '–∫–∞–ø—É—á–∏–Ω–æ', '–ª–∞—Ç—Ç–µ', '–∞–º–µ—Ä–∏–∫–∞–Ω–æ', 'espresso', 'cappuccino', 'latte', 'americano'],
  'cocktail': ['–∫–æ–∫—Ç–µ–π–ª—å', 'cocktail', '–º–æ—Ö–∏—Ç–æ', '–¥–∞–π–∫–∏—Ä–∏', '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞', 'mojito', 'daiquiri', 'margarita'],
  'wine': ['–≤–∏–Ω–æ', 'wine', '–∫—Ä–∞—Å–Ω–æ–µ', '–±–µ–ª–æ–µ', '—Ä–æ–∑–æ–≤–æ–µ', 'red', 'white', 'rose'],
  'beer': ['–ø–∏–≤–æ', 'beer', '–ª–∞–≥–µ—Ä', '—ç–ª—å', '—Å—Ç–∞—É—Ç', 'lager', 'ale', 'stout'],
  'strong': ['–≤–æ–¥–∫–∞', '–≤–∏—Å–∫–∏', '–∫–æ–Ω—å—è–∫', '—Ä–æ–º', '–¥–∂–∏–Ω', 'vodka', 'whiskey', 'cognac', 'rum', 'gin'],
  'shawarma': ['—à–∞—É—Ä–º–∞', '—à–∞–≤–µ—Ä–º–∞', '–ª–∞–≤–∞—à', 'shawarma', 'shawrma', 'lavash'],
  'side': ['–≥–∞—Ä–Ω–∏—Ä', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '—Ä–∏—Å', '–º–∞–∫–∞—Ä–æ–Ω—ã', '–æ–≤–æ—â–∏', 'side', 'potato', 'rice', 'pasta', 'vegetables'],
  'sauce': ['—Å–æ—É—Å', '–∫–µ—Ç—á—É–ø', '–º–∞–π–æ–Ω–µ–∑', '–≥–æ—Ä—á–∏—Ü–∞', 'sauce', 'ketchup', 'mayo', 'mustard'],
  'bread': ['—Ö–ª–µ–±', '–ª–∞–≤–∞—à', '–ø–∏—Ç—Ç–∞', '–±–∞–≥–µ—Ç', 'bread', 'pita', 'baguette'],
  'smoothie': ['—Å–º—É–∑–∏', '—Ñ—Ä—É–∫—Ç–æ–≤—ã–π', 'smoothie', 'fruit'],
  'lemonade': ['–ª–∏–º–æ–Ω–∞–¥', '–ª–∏–º–æ–Ω', 'lemonade', 'lemon'],
  'juice': ['—Å–æ–∫', '–∞–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π', '—è–±–ª–æ—á–Ω—ã–π', 'juice', 'orange', 'apple']
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∞–π–ª–∞
 */
function detectCategory(filename) {
  const cleanName = filename.toLowerCase().replace(/\.(jpg|jpeg|png|webp)$/i, '');
  
  for (const [category, keywords] of Object.entries(categoryKeywords)) {
    if (keywords.some(keyword => cleanName.includes(keyword))) {
      return category;
    }
  }
  
  return 'other'; // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
}

/**
 * –û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
 */
function organizePhotos(sourceDir, targetDir = 'public/images/menu') {
  if (!fs.existsSync(sourceDir)) {
    console.log('‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sourceDir);
    return;
  }
  
  console.log('üìÇ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...\n');
  
  const files = fs.readdirSync(sourceDir)
    .filter(file => /\.(jpg|jpeg|png|webp)$/i.test(file));
  
  if (files.length === 0) {
    console.log('‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ:', sourceDir);
    return;
  }
  
  console.log(`üì∏ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
  
  const categoryStats = {};
  const movedFiles = [];
  
  files.forEach(file => {
    const category = detectCategory(file);
    const sourcePath = path.join(sourceDir, file);
    const targetCategoryDir = path.join(targetDir, category);
    const targetPath = path.join(targetCategoryDir, file);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(targetCategoryDir)) {
      fs.mkdirSync(targetCategoryDir, { recursive: true });
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
    try {
      fs.copyFileSync(sourcePath, targetPath);
      
      categoryStats[category] = (categoryStats[category] || 0) + 1;
      movedFiles.push({ file, category });
      
      console.log(`‚úÖ ${file} -> ${category}/`);
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ ${file}:`, error.message);
    }
  });
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:');
  Object.entries(categoryStats).forEach(([category, count]) => {
    console.log(`   ${category.padEnd(12)} ${count.toString().padStart(3)} —Ñ–æ—Ç–æ`);
  });
  
  console.log(`\nüéâ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ ${movedFiles.length} –∏–∑ ${files.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
  
  return movedFiles;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function createSampleFiles(testDir = 'test-photos') {
  console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...\n');
  
  if (!fs.existsSync(testDir)) {
    fs.mkdirSync(testDir);
  }
  
  const sampleFiles = [
    'kaif-breakfast.jpg',
    'pancakes-blueberry.jpg', 
    'borsch-classic.jpg',
    'soup-mushroom.jpg',
    'caesar-salad.jpg',
    'greek-salad.jpg',
    'beef-steak-grill.jpg',
    'salmon-grill.jpg',
    'cheeseburger-deluxe.jpg',
    'tiramisu-classic.jpg',
    'cheesecake-berry.jpg',
    'black-tea.jpg',
    'green-tea-mint.jpg',
    'espresso-double.jpg',
    'cappuccino-art.jpg',
    'mojito-fresh.jpg',
    'red-wine-merlot.jpg',
    'beer-lager.jpg',
    'vodka-premium.jpg',
    'shawarma-chicken.jpg',
    'rice-pilaf.jpg',
    'tomato-sauce.jpg',
    'bread-fresh.jpg',
    'smoothie-berry.jpg',
    'lemonade-classic.jpg',
    'orange-juice.jpg'
  ];
  
  sampleFiles.forEach(filename => {
    const filePath = path.join(testDir, filename);
    fs.writeFileSync(filePath, 'test image content');
    console.log(`üìù –°–æ–∑–¥–∞–Ω: ${filename}`);
  });
  
  console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–æ ${sampleFiles.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ ${testDir}`);
  console.log(`üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node organize-photos.cjs organize ${testDir}`);
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
 */
function showHelp() {
  console.log(`
üìÅ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –º–µ–Ω—é KAIF

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node organize-photos.cjs [–∫–æ–º–∞–Ω–¥–∞] [–ø–∞–ø–∫–∞]

–ö–æ–º–∞–Ω–¥—ã:
  organize <–ø–∞–ø–∫–∞>    –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
  test               –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node organize-photos.cjs organize ~/Desktop/photos_from_photographer
  node organize-photos.cjs organize ./raw-photos
  node organize-photos.cjs test

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è:
üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
üìÅ –°–æ–∑–¥–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏ –≤ public/images/menu/
üì∏ –ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, JPEG, PNG, WebP
`);
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥
const command = process.argv[2] || 'help';
const sourceDir = process.argv[3];

switch (command) {
  case 'organize':
    if (!sourceDir) {
      console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏');
      console.log('üí° –ü—Ä–∏–º–µ—Ä: node organize-photos.cjs organize ~/Desktop/photos');
      break;
    }
    organizePhotos(sourceDir);
    break;
    
  case 'test':
    createSampleFiles();
    break;
    
  case 'help':
  default:
    showHelp();
    break;
} 