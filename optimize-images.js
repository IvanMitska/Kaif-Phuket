import imagemin from 'imagemin';
import imageminMozjpeg from 'imagemin-mozjpeg';
import imageminPngquant from 'imagemin-pngquant';
import fs from 'fs';
import path from 'path';

async function optimizeImages() {
  console.log('üñºÔ∏è  Starting image optimization...');
  
  try {
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º JPG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const jpgFiles = await imagemin(['public/images/**/*.{jpg,jpeg}'], {
      destination: 'public/images-optimized',
      plugins: [
        imageminMozjpeg({
          quality: 85, // –ö–∞—á–µ—Å—Ç–≤–æ 85% - —Ö–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å —Ä–∞–∑–º–µ—Ä–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
          progressive: true // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        })
      ]
    });

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
    const pngFiles = await imagemin(['public/images/**/*.png'], {
      destination: 'public/images-optimized',
      plugins: [
        imageminPngquant({
          quality: [0.8, 0.9] // –ö–∞—á–µ—Å—Ç–≤–æ 80-90%
        })
      ]
    });

    console.log(`‚úÖ Optimized ${jpgFiles.length} JPG files`);
    console.log(`‚úÖ Optimized ${pngFiles.length} PNG files`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∂–∞—Ç–∏—è
    let totalOriginal = 0;
    let totalOptimized = 0;
    
    for (const file of [...jpgFiles, ...pngFiles]) {
      const originalPath = file.sourcePath;
      const optimizedPath = file.destinationPath;
      
      if (fs.existsSync(originalPath) && fs.existsSync(optimizedPath)) {
        const originalSize = fs.statSync(originalPath).size;
        const optimizedSize = fs.statSync(optimizedPath).size;
        const savings = ((originalSize - optimizedSize) / originalSize * 100).toFixed(1);
        
        totalOriginal += originalSize;
        totalOptimized += optimizedSize;
        
        console.log(`üìÑ ${path.basename(originalPath)}: ${(originalSize/1024/1024).toFixed(1)}MB ‚Üí ${(optimizedSize/1024/1024).toFixed(1)}MB (-${savings}%)`);
      }
    }
    
    const totalSavings = ((totalOriginal - totalOptimized) / totalOriginal * 100).toFixed(1);
    console.log(`\nüéØ Total: ${(totalOriginal/1024/1024).toFixed(1)}MB ‚Üí ${(totalOptimized/1024/1024).toFixed(1)}MB (-${totalSavings}%)`);
    console.log('‚ú® Optimization complete! Check public/images-optimized/');
    
  } catch (error) {
    console.error('‚ùå Error optimizing images:', error);
  }
}

optimizeImages(); 