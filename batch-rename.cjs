#!/usr/bin/env node

/**
 * üì¶ –ü–∞–∫–µ—Ç–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
 * –î–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
 */

const fs = require('fs');
const path = require('path');

const categories = [
  'breakfast', 'soup', 'salad', 'grill', 'burger', 'dessert',
  'coffee', 'tea', 'cocktail', 'wine', 'beer', 'strong',
  'shawarma', 'side', 'sauce', 'bread', 'juice', 'lemonade', 'smoothie'
];

/**
 * –ü–∞–∫–µ—Ç–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä–∞–º
 */
function batchRename(sourceDir, category, startFrom = 1) {
  if (!categories.includes(category)) {
    console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', category);
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ:', categories.join(', '));
    return;
  }
  
  const photos = fs.readdirSync(sourceDir)
    .filter(file => /\.(jpg|jpeg|png|webp)$/i.test(file))
    .sort();
  
  if (photos.length === 0) {
    console.log('‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ:', sourceDir);
    return;
  }
  
  console.log(`üì¶ –ü–∞–∫–µ—Ç–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}"`);
  console.log(`üì∏ –ù–∞–π–¥–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n`);
  
  const targetDir = path.join('public/images/menu', category);
  if (!fs.existsSync(targetDir)) {
    fs.mkdirSync(targetDir, { recursive: true });
  }
  
  photos.forEach((photo, index) => {
    const ext = path.extname(photo);
    const newName = `${category}-${String(startFrom + index).padStart(3, '0')}${ext}`;
    const sourcePath = path.join(sourceDir, photo);
    const targetPath = path.join(targetDir, newName);
    
    try {
      fs.copyFileSync(sourcePath, targetPath);
      console.log(`‚úÖ ${photo} ‚Üí ${category}/${newName}`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${photo} - ${error.message}`);
    }
  });
  
  console.log(`\nüéâ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ ${photos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}"`);
}

/**
 * –†–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
 */
function splitByCount(sourceDir, groupSize = 10) {
  const photos = fs.readdirSync(sourceDir)
    .filter(file => /\.(jpg|jpeg|png|webp)$/i.test(file))
    .sort();
  
  if (photos.length === 0) {
    console.log('‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }
  
  console.log(`üìã –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ ${photos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ ${groupSize}:\n`);
  
  const groups = [];
  for (let i = 0; i < photos.length; i += groupSize) {
    const group = photos.slice(i, i + groupSize);
    groups.push({
      index: Math.floor(i / groupSize) + 1,
      files: group,
      start: i + 1,
      end: Math.min(i + groupSize, photos.length)
    });
  }
  
  groups.forEach(group => {
    console.log(`üìÅ –ì—Ä—É–ø–ø–∞ ${group.index}: —Ñ–æ—Ç–æ ${group.start}-${group.end} (${group.files.length} —à—Ç—É–∫)`);
    console.log(`   –ü–µ—Ä–≤–æ–µ: ${group.files[0]}`);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ: ${group.files[group.files.length - 1]}`);
    console.log('');
  });
  
  console.log('üí° –î–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
  console.log('   node batch-rename.cjs range <–ø–∞–ø–∫–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–Ω–∞—á–∞–ª–æ> <–∫–æ–Ω–µ—Ü>');
  console.log('üí° –ù–∞–ø—Ä–∏–º–µ—Ä: node batch-rename.cjs range ~/Desktop/photos breakfast 1 10');
}

/**
 * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ñ–∞–π–ª–æ–≤
 */
function renameRange(sourceDir, category, startIndex, endIndex) {
  if (!categories.includes(category)) {
    console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:', category);
    return;
  }
  
  const photos = fs.readdirSync(sourceDir)
    .filter(file => /\.(jpg|jpeg|png|webp)$/i.test(file))
    .sort();
  
  const selectedPhotos = photos.slice(startIndex - 1, endIndex);
  
  if (selectedPhotos.length === 0) {
    console.log('‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ');
    return;
  }
  
  console.log(`üì¶ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ${startIndex}-${endIndex} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category}"`);
  console.log(`üì∏ –í—ã–±—Ä–∞–Ω–æ ${selectedPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n`);
  
  const targetDir = path.join('public/images/menu', category);
  if (!fs.existsSync(targetDir)) {
    fs.mkdirSync(targetDir, { recursive: true });
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const existingFiles = fs.existsSync(targetDir) ? 
    fs.readdirSync(targetDir).filter(f => f.startsWith(category + '-')).length : 0;
  
  selectedPhotos.forEach((photo, index) => {
    const ext = path.extname(photo);
    const newName = `${category}-${String(existingFiles + index + 1).padStart(3, '0')}${ext}`;
    const sourcePath = path.join(sourceDir, photo);
    const targetPath = path.join(targetDir, newName);
    
    try {
      fs.copyFileSync(sourcePath, targetPath);
      console.log(`‚úÖ ${photo} ‚Üí ${category}/${newName}`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${photo} - ${error.message}`);
    }
  });
  
  console.log(`\nüéâ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ ${selectedPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
}

/**
 * –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –ø–∞–ø–æ–∫ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
function createSortingFolders(baseDir = './photo-sorting') {
  console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤: ${baseDir}\n`);
  
  categories.forEach(category => {
    const categoryDir = path.join(baseDir, category);
    if (!fs.existsSync(categoryDir)) {
      fs.mkdirSync(categoryDir, { recursive: true });
      console.log(`üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${category}/`);
    }
  });
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö
  const otherDir = path.join(baseDir, 'other');
  if (!fs.existsSync(otherDir)) {
    fs.mkdirSync(otherDir, { recursive: true });
    console.log(`üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: other/`);
  }
  
  console.log(`\nüéØ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:`);
  console.log(`1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É ${baseDir}`);
  console.log(`2. –í—Ä—É—á–Ω—É—é –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏`);
  console.log(`3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node batch-rename.cjs process-sorted ${baseDir}`);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –ø–∞–ø–∫–∏
 */
function processSortedFolders(sortingDir) {
  console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –∏–∑: ${sortingDir}\n`);
  
  categories.concat(['other']).forEach(category => {
    const categoryDir = path.join(sortingDir, category);
    
    if (fs.existsSync(categoryDir)) {
      const photos = fs.readdirSync(categoryDir)
        .filter(file => /\.(jpg|jpeg|png|webp)$/i.test(file));
      
      if (photos.length > 0) {
        console.log(`üì∏ ${category}: –Ω–∞–π–¥–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ`);
        batchRename(categoryDir, category === 'other' ? 'other' : category);
        console.log('');
      }
    }
  });
  
  console.log('üéâ –í—Å–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
 */
function showHelp() {
  console.log(`
üì¶ –ü–∞–∫–µ—Ç–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node batch-rename.cjs [–∫–æ–º–∞–Ω–¥–∞] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ö–æ–º–∞–Ω–¥—ã:
  batch <–ø–∞–ø–∫–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>           –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  split <–ø–∞–ø–∫–∞> [—Ä–∞–∑–º–µ—Ä_–≥—Ä—É–ø–ø—ã]       –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  range <–ø–∞–ø–∫–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <–æ—Ç> <–¥–æ> –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ñ–æ—Ç–æ
  folders [–±–∞–∑–æ–≤–∞—è_–ø–∞–ø–∫–∞]             –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  process-sorted <–ø–∞–ø–∫–∞_—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏>   –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é —Ñ–æ—Ç–æ
  help                                –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  # –í—Å–µ —Ñ–æ—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–∑–∞–≤—Ç—Ä–∞–∫–∏"
  node batch-rename.cjs batch ~/Desktop/photos breakfast
  
  # –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã –ø–æ 15 —Ñ–æ—Ç–æ
  node batch-rename.cjs split ~/Desktop/photos 15
  
  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ 1-20 –≤ "—Å—É–ø—ã"  
  node batch-rename.cjs range ~/Desktop/photos soup 1 20
  
  # –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  node batch-rename.cjs folders
  
  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
  node batch-rename.cjs process-sorted ./photo-sorting

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
  ${categories.join(', ')}

–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–±–æ—Ç—ã:
1. üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ: node interactive-categorizer.cjs categorize <–ø–∞–ø–∫–∞>
2. üì¶ –ü–∞–∫–µ—Ç–Ω–æ: node batch-rename.cjs batch <–ø–∞–ø–∫–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>
3. üóÇÔ∏è  –í—Ä—É—á–Ω—É—é: —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫–∏ ‚Üí –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å ‚Üí –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
`);
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
function main() {
  const command = process.argv[2] || 'help';
  
  switch (command) {
    case 'batch':
      const sourceDir = process.argv[3];
      const category = process.argv[4];
      
      if (!sourceDir || !category) {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
        console.log('üí° –ü—Ä–∏–º–µ—Ä: node batch-rename.cjs batch ~/Desktop/photos breakfast');
        break;
      }
      
      batchRename(sourceDir, category);
      break;
      
    case 'split':
      const splitDir = process.argv[3];
      const groupSize = parseInt(process.argv[4]) || 10;
      
      if (!splitDir) {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏');
        break;
      }
      
      splitByCount(splitDir, groupSize);
      break;
      
    case 'range':
      const rangeDir = process.argv[3];
      const rangeCategory = process.argv[4];
      const startIndex = parseInt(process.argv[5]);
      const endIndex = parseInt(process.argv[6]);
      
      if (!rangeDir || !rangeCategory || !startIndex || !endIndex) {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ø–∞–ø–∫–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü');
        console.log('üí° –ü—Ä–∏–º–µ—Ä: node batch-rename.cjs range ~/Desktop/photos soup 1 10');
        break;
      }
      
      renameRange(rangeDir, rangeCategory, startIndex, endIndex);
      break;
      
    case 'folders':
      const baseDir = process.argv[3] || './photo-sorting';
      createSortingFolders(baseDir);
      break;
      
    case 'process-sorted':
      const sortingDir = process.argv[3];
      
      if (!sortingDir) {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ');
        break;
      }
      
      processSortedFolders(sortingDir);
      break;
      
    case 'help':
    default:
      showHelp();
      break;
  }
}

main(); 